syntax = "proto3";

package otoncoin;


message Coin {
  string name = 1; // denom - вместо имени, название для сущностей, не прижилось...
  int64 amount = 2;
}

message Input {
  bytes address = 1; // Hash of the PubKey, first 20 symbols
  repeated Coin coins = 2;
  int64 sequence = 3; // Must be 1 greater than the last committed Input
  bytes signature = 4; // Depends on the PubKey type and the whole Tx
  bytes pub_key = 5; // a'la tendermint.crypto.PublicKey. Is present if Sequence == 0
}

// В классическом блс используется хеш от пубкей, он же адрес, мы для получения адреса хеш укорачиваем ...
// потому имеет смысл  хранить полный хеш от пубкей, тогда это будет и не адрес и не пубкей
// для валидации лучше полный хеш, а для визуализации вообще без разницы,
// возможно удлиню это поле и будет оно называться PubKeyHash, будет уже не адрес, но пока это именно адрес
message Output {
  bytes address = 1; // Hash of the PubKey, first 20 symbols
  repeated Coin coins = 2;
}

// protobuf не поддерживает интерфейсы,
// потому НЕ будем пытаться вычислить тип данных автоматически reflect.TypeOf
// используем непосредственное указание типа
message Raw {
  string type = 1;
  bytes raw = 2; // protobuf(tx)
}

// Пересылка монет между адресами
message SendCoins {
  int64 gas = 1;
  Coin fee = 2;
  repeated Input inputs = 3;
  repeated Output outputs = 4;
}

// Чеканка монет
message MintCoins {
  Coin fee = 1; // Комиссия для ноды
  repeated Input inputs = 2; // Адреса для списании комиссии
  repeated Output outputs = 3; // Адреса для зачисления
  string name = 4; // Символьное название эмитируемой монеты
  int64 amount = 5; // Количество эмитируемых монет
  uint32 decimal_point = 6; // Децимальная точка
  bool movable = 7; // Могут ли пользователи пересылать монеты
  int64 delta = 8; // Доля от цены монеты приходящаяся на выплаты в реферальной цепи
}



// Транзакция установления цены товара/монеты
message SetSalePrice {
  Coin fee = 1; // Комиссия для ноды

  // Только создатель монеты может задавать цену ?
  // вроде как нет  - но и кто попало тоже не должен менять стоимость монеты как товара
  repeated Input inputs = 2;

  // Символьное название монеты
  string name = 3;

  // цена 1 монеты, в какой нибудь другой монете
  // Или задать сразу массив/таблицу цен
  Coin price = 4;
}




// Запуск маркетинговой кампании affiliate marketing campaign с параметрами по умолчанию
message CreateAMC {
  Coin fee = 1; // Комиссия для ноды

  // Платить комиссию и депозит
  // Самый главный голова-создатель компании и первый спонсор: один адрес создателя - одна компания
  // Все остальные указанные в списке получают право вызывать транзакции сервиса регистрации продаж товаров
  repeated Input inputs = 2;

  // адрес амс компании и депозита 
  // при создании нужна проверка адреса(имени) на дубликат
  bytes address = 3;

  // Символьное название создаваемой компании
  string name = 4; 

  // Список параметров маркетинговых планов
  repeated AMCParam params = 5; 

  // Задать как параметр для каждой логики отдельно ?
  // bytes  service = 5; // адрес сервиса регистрации продаж  
}

// параметры алгоритма {ключ:значение}
message AMCParam {
  string key = 1; // имя параметра
  int64 value = 2; // значение
}


// Транзакция регистрация сетевика (присоединение к MLM компании)
// В случае успеха, пользователь зарегистрирован в MLM компании.
message SetInAMC {
  Coin fee = 1; // Комиссия для ноды

  // оракул регистрирует пользователя и платит за него комиссию
  repeated Input inputs = 2;

  // Символьное название компании, проверяется подключился ли спонсор к этой компании
  // поменяем на адрес, а имя АМС будет доступно только в транзакции создания 
  bytes address = 3;

  // адрес нового пользователя	
  bytes referal = 4;

  // address спонсора, обязательно указывать 
  // пользователь встаёт в реферальное дерево под своего спонсора и остаётся там навсегда
  bytes sponsor = 5;
}


// Транзакция покупки товара в системе маркетинговой кампании
// начисления должны определяется только положением реферала в дереве и алгоритмом 
message BuyInAMC {
  Coin fee = 1; // Комиссия для ноды

  // оракул регистрирует покупку пользователя и платит за него комиссию
  // Всё что указанно во входах больше fee поступает на депозит АМС компании 
  repeated Input inputs = 2;

  // Адресс компании
  bytes address = 3;

  // адрес  пользователя	
  bytes referal = 4;

  // 18 августа, теперь нас не интресует что купил пользователь
  Coin value = 5;   // сумма продажи, что за товар неважно, сумма для справки 
  Coin delta = 6;   // дельта, задаётся в монетах, раздаётся с депозита АМС 
}

// TODO: !!! Поля добавлены чтобы не ругался модуль amc.go !!!

// что желается получить: виртуальный или натуральный товар
// repeated Output outputs = 7;

// address спонсора, обязательно указывать в первой покупке
// пользователь встаёт в реферальное дерево под своего спонсора и остаётся там навсегда
// bytes sponsor = 8;





// Регистрация отмены продажи
message RefundInAMC {
  Coin fee = 1; // Комиссия для ноды

  // оракул регистрирует покупку пользователя и платит за него комиссию
  repeated Input inputs = 2;

  // Символьное название компании
  string name = 3;

  // хеш транзакции регистрации покупки	
  bytes buy = 4;

 // причина возврата (для отображения покупателю в эксплорере)
  string log = 5; 
}



// Транзакция-заявление на передачу прав/баланса с одного адреса на другой 
// Таких заявлений можно выпустить много - активным будет считатся последнее 
// Транзакция лежит в блокчейне  и никак не влияет на балансы
message ChangeAddressWant {
  Coin fee = 1; // Комиссия для ноды

  // Пользователь от имени которого будет отправленно заявление-список друзей
  repeated Input inputs = 2;

  // Адреса пользователей которые проголосуют за эту операцию, достаточно будет 2/3 голосов.
  // Если один  адрес - то и всего одного голоса хватит, 
  // например желается передать баланс аккаунта со всеми рангами и товарооборотом на новый адрес 
  repeated Output outputs = 3; 
}


// Предполагается что пользователь знает лично тех кто должен проголосовать, 
// и предложит им транзакцию на подписание через свои каналы: мессенгеры,почта и тп
// Пользователи обмениваются транзакцией, подписывают каждый своей сигнатурой и по готовности транзакция отправляется на ноду в сеть
// При срабатывании  транзакции право на ранги товарообороты и прочее на балансе перейдёт новому владельцу. 
message ChangeAddressApply {
  Coin fee = 1; // Комиссия для ноды

  // Пользователь от имени которого будет отправленно заявление о смене адреса указывается в списке первым,
  // на этот адрес перейдёт право распоряжатся балансом старого адреса.
  // Остальные отправители оставляют свои сигнатуры и подписывают транзакцию 
  repeated Input inputs = 2;

  // TODO: Проверка полей Input потребуется отличная от просто переводов 
  // если какието из сигнатур можут быть не заполненны или будут неверными  
  // это допустимо до 1/3 общего количества подписантов 


  // Старый адрес - баланс которого поступит на новый аккаунт 
  bytes address = 3; 
	
  // хеш транзакции-заявления оставленный ранее - по сути необязателен 
  // bytes buy = 4;
}
